/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/runtimeMappers";
import * as Parameters from "../models/parameters";
import { KuduClientContext } from "../kuduClientContext";

/** Class representing a Runtime. */
export class Runtime {
  private readonly client: KuduClientContext;

  /**
   * Create a Runtime.
   * @param {KuduClientContext} client Reference to the service client.
   */
  constructor(client: KuduClientContext) {
    this.client = client;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.RuntimeGetRuntimeVersionsResponse>
   */
  getRuntimeVersions(options?: Models.RuntimeGetRuntimeVersionsOptionalParams): Promise<Models.RuntimeGetRuntimeVersionsResponse>;
  /**
   * @param callback The callback
   */
  getRuntimeVersions(callback: msRest.ServiceCallback<Models.RuntimeInfo>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRuntimeVersions(options: Models.RuntimeGetRuntimeVersionsOptionalParams, callback: msRest.ServiceCallback<Models.RuntimeInfo>): void;
  getRuntimeVersions(options?: Models.RuntimeGetRuntimeVersionsOptionalParams | msRest.ServiceCallback<Models.RuntimeInfo>, callback?: msRest.ServiceCallback<Models.RuntimeInfo>): Promise<Models.RuntimeGetRuntimeVersionsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getRuntimeVersionsOperationSpec,
      callback) as Promise<Models.RuntimeGetRuntimeVersionsResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.RuntimeGetRuntimeVersions1Response>
   */
  getRuntimeVersions1(options?: Models.RuntimeGetRuntimeVersions1OptionalParams): Promise<Models.RuntimeGetRuntimeVersions1Response>;
  /**
   * @param callback The callback
   */
  getRuntimeVersions1(callback: msRest.ServiceCallback<Models.RuntimeInfo>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRuntimeVersions1(options: Models.RuntimeGetRuntimeVersions1OptionalParams, callback: msRest.ServiceCallback<Models.RuntimeInfo>): void;
  getRuntimeVersions1(options?: Models.RuntimeGetRuntimeVersions1OptionalParams | msRest.ServiceCallback<Models.RuntimeInfo>, callback?: msRest.ServiceCallback<Models.RuntimeInfo>): Promise<Models.RuntimeGetRuntimeVersions1Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getRuntimeVersions1OperationSpec,
      callback) as Promise<Models.RuntimeGetRuntimeVersions1Response>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getRuntimeVersionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "diagnostics/runtime",
  queryParameters: [
    Parameters.allVersions
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RuntimeInfo
    },
    default: {}
  },
  serializer
};

const getRuntimeVersions1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/diagnostics/runtime",
  queryParameters: [
    Parameters.allVersions
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RuntimeInfo
    },
    default: {}
  },
  serializer
};
