/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/jobsMappers";
import * as Parameters from "../models/parameters";
import { KuduClientContext } from "../kuduClientContext";

/** Class representing a Jobs. */
export class Jobs {
  private readonly client: KuduClientContext;

  /**
   * Create a Jobs.
   * @param {KuduClientContext} client Reference to the service client.
   */
  constructor(client: KuduClientContext) {
    this.client = client;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListAllJobsResponse>
   */
  listAllJobs(options?: msRest.RequestOptionsBase): Promise<Models.JobsListAllJobsResponse>;
  /**
   * @param callback The callback
   */
  listAllJobs(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAllJobs(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listAllJobs(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsListAllJobsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAllJobsOperationSpec,
      callback) as Promise<Models.JobsListAllJobsResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListAllJobs1Response>
   */
  listAllJobs1(options?: msRest.RequestOptionsBase): Promise<Models.JobsListAllJobs1Response>;
  /**
   * @param callback The callback
   */
  listAllJobs1(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAllJobs1(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listAllJobs1(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsListAllJobs1Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAllJobs1OperationSpec,
      callback) as Promise<Models.JobsListAllJobs1Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListAllJobs2Response>
   */
  listAllJobs2(options?: msRest.RequestOptionsBase): Promise<Models.JobsListAllJobs2Response>;
  /**
   * @param callback The callback
   */
  listAllJobs2(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAllJobs2(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listAllJobs2(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsListAllJobs2Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAllJobs2OperationSpec,
      callback) as Promise<Models.JobsListAllJobs2Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListTriggeredJobsResponse>
   */
  listTriggeredJobs(options?: msRest.RequestOptionsBase): Promise<Models.JobsListTriggeredJobsResponse>;
  /**
   * @param callback The callback
   */
  listTriggeredJobs(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listTriggeredJobs(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listTriggeredJobs(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsListTriggeredJobsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listTriggeredJobsOperationSpec,
      callback) as Promise<Models.JobsListTriggeredJobsResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListTriggeredJobs1Response>
   */
  listTriggeredJobs1(options?: msRest.RequestOptionsBase): Promise<Models.JobsListTriggeredJobs1Response>;
  /**
   * @param callback The callback
   */
  listTriggeredJobs1(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listTriggeredJobs1(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listTriggeredJobs1(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsListTriggeredJobs1Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listTriggeredJobs1OperationSpec,
      callback) as Promise<Models.JobsListTriggeredJobs1Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListTriggeredJobs2Response>
   */
  listTriggeredJobs2(options?: msRest.RequestOptionsBase): Promise<Models.JobsListTriggeredJobs2Response>;
  /**
   * @param callback The callback
   */
  listTriggeredJobs2(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listTriggeredJobs2(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listTriggeredJobs2(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsListTriggeredJobs2Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listTriggeredJobs2OperationSpec,
      callback) as Promise<Models.JobsListTriggeredJobs2Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListTriggeredJobs3Response>
   */
  listTriggeredJobs3(options?: msRest.RequestOptionsBase): Promise<Models.JobsListTriggeredJobs3Response>;
  /**
   * @param callback The callback
   */
  listTriggeredJobs3(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listTriggeredJobs3(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listTriggeredJobs3(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsListTriggeredJobs3Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listTriggeredJobs3OperationSpec,
      callback) as Promise<Models.JobsListTriggeredJobs3Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJobResponse>
   */
  getTriggeredJob(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJobResponse>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getTriggeredJob(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJob(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJob(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJobResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getTriggeredJobOperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJobResponse>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsCreateTriggeredJobResponse>
   */
  createTriggeredJob(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsCreateTriggeredJobResponse>;
  /**
   * @param jobName
   * @param callback The callback
   */
  createTriggeredJob(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  createTriggeredJob(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createTriggeredJob(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsCreateTriggeredJobResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      createTriggeredJobOperationSpec,
      callback) as Promise<Models.JobsCreateTriggeredJobResponse>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRemoveTriggeredJobResponse>
   */
  removeTriggeredJob(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRemoveTriggeredJobResponse>;
  /**
   * @param jobName
   * @param callback The callback
   */
  removeTriggeredJob(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  removeTriggeredJob(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  removeTriggeredJob(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRemoveTriggeredJobResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      removeTriggeredJobOperationSpec,
      callback) as Promise<Models.JobsRemoveTriggeredJobResponse>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJob1Response>
   */
  getTriggeredJob1(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJob1Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getTriggeredJob1(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJob1(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJob1(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJob1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getTriggeredJob1OperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJob1Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsCreateTriggeredJob1Response>
   */
  createTriggeredJob1(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsCreateTriggeredJob1Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  createTriggeredJob1(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  createTriggeredJob1(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createTriggeredJob1(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsCreateTriggeredJob1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      createTriggeredJob1OperationSpec,
      callback) as Promise<Models.JobsCreateTriggeredJob1Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRemoveTriggeredJob1Response>
   */
  removeTriggeredJob1(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRemoveTriggeredJob1Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  removeTriggeredJob1(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  removeTriggeredJob1(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  removeTriggeredJob1(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRemoveTriggeredJob1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      removeTriggeredJob1OperationSpec,
      callback) as Promise<Models.JobsRemoveTriggeredJob1Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJob2Response>
   */
  getTriggeredJob2(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJob2Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getTriggeredJob2(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJob2(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJob2(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJob2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getTriggeredJob2OperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJob2Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsCreateTriggeredJob2Response>
   */
  createTriggeredJob2(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsCreateTriggeredJob2Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  createTriggeredJob2(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  createTriggeredJob2(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createTriggeredJob2(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsCreateTriggeredJob2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      createTriggeredJob2OperationSpec,
      callback) as Promise<Models.JobsCreateTriggeredJob2Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRemoveTriggeredJob2Response>
   */
  removeTriggeredJob2(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRemoveTriggeredJob2Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  removeTriggeredJob2(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  removeTriggeredJob2(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  removeTriggeredJob2(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRemoveTriggeredJob2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      removeTriggeredJob2OperationSpec,
      callback) as Promise<Models.JobsRemoveTriggeredJob2Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJob3Response>
   */
  getTriggeredJob3(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJob3Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getTriggeredJob3(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJob3(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJob3(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJob3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getTriggeredJob3OperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJob3Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsCreateTriggeredJob3Response>
   */
  createTriggeredJob3(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsCreateTriggeredJob3Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  createTriggeredJob3(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  createTriggeredJob3(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createTriggeredJob3(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsCreateTriggeredJob3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      createTriggeredJob3OperationSpec,
      callback) as Promise<Models.JobsCreateTriggeredJob3Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRemoveTriggeredJob3Response>
   */
  removeTriggeredJob3(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRemoveTriggeredJob3Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  removeTriggeredJob3(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  removeTriggeredJob3(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  removeTriggeredJob3(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRemoveTriggeredJob3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      removeTriggeredJob3OperationSpec,
      callback) as Promise<Models.JobsRemoveTriggeredJob3Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsInvokeTriggeredJobResponse>
   */
  invokeTriggeredJob(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsInvokeTriggeredJobResponse>;
  /**
   * @param jobName
   * @param callback The callback
   */
  invokeTriggeredJob(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  invokeTriggeredJob(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  invokeTriggeredJob(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsInvokeTriggeredJobResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      invokeTriggeredJobOperationSpec,
      callback) as Promise<Models.JobsInvokeTriggeredJobResponse>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsInvokeTriggeredJob1Response>
   */
  invokeTriggeredJob1(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsInvokeTriggeredJob1Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  invokeTriggeredJob1(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  invokeTriggeredJob1(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  invokeTriggeredJob1(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsInvokeTriggeredJob1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      invokeTriggeredJob1OperationSpec,
      callback) as Promise<Models.JobsInvokeTriggeredJob1Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsInvokeTriggeredJob2Response>
   */
  invokeTriggeredJob2(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsInvokeTriggeredJob2Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  invokeTriggeredJob2(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  invokeTriggeredJob2(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  invokeTriggeredJob2(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsInvokeTriggeredJob2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      invokeTriggeredJob2OperationSpec,
      callback) as Promise<Models.JobsInvokeTriggeredJob2Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsInvokeTriggeredJob3Response>
   */
  invokeTriggeredJob3(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsInvokeTriggeredJob3Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  invokeTriggeredJob3(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  invokeTriggeredJob3(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  invokeTriggeredJob3(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsInvokeTriggeredJob3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      invokeTriggeredJob3OperationSpec,
      callback) as Promise<Models.JobsInvokeTriggeredJob3Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJobHistoryResponse>
   */
  getTriggeredJobHistory(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJobHistoryResponse>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getTriggeredJobHistory(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJobHistory(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJobHistory(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJobHistoryResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getTriggeredJobHistoryOperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJobHistoryResponse>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJobHistory1Response>
   */
  getTriggeredJobHistory1(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJobHistory1Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getTriggeredJobHistory1(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJobHistory1(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJobHistory1(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJobHistory1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getTriggeredJobHistory1OperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJobHistory1Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJobHistory2Response>
   */
  getTriggeredJobHistory2(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJobHistory2Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getTriggeredJobHistory2(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJobHistory2(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJobHistory2(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJobHistory2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getTriggeredJobHistory2OperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJobHistory2Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJobHistory3Response>
   */
  getTriggeredJobHistory3(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJobHistory3Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getTriggeredJobHistory3(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJobHistory3(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJobHistory3(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJobHistory3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getTriggeredJobHistory3OperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJobHistory3Response>;
  }

  /**
   * @param jobName
   * @param runId
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJobRunResponse>
   */
  getTriggeredJobRun(jobName: string, runId: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJobRunResponse>;
  /**
   * @param jobName
   * @param runId
   * @param callback The callback
   */
  getTriggeredJobRun(jobName: string, runId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param runId
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJobRun(jobName: string, runId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJobRun(jobName: string, runId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJobRunResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        runId,
        options
      },
      getTriggeredJobRunOperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJobRunResponse>;
  }

  /**
   * @param jobName
   * @param runId
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJobRun1Response>
   */
  getTriggeredJobRun1(jobName: string, runId: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJobRun1Response>;
  /**
   * @param jobName
   * @param runId
   * @param callback The callback
   */
  getTriggeredJobRun1(jobName: string, runId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param runId
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJobRun1(jobName: string, runId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJobRun1(jobName: string, runId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJobRun1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        runId,
        options
      },
      getTriggeredJobRun1OperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJobRun1Response>;
  }

  /**
   * @param jobName
   * @param runId
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJobRun2Response>
   */
  getTriggeredJobRun2(jobName: string, runId: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJobRun2Response>;
  /**
   * @param jobName
   * @param runId
   * @param callback The callback
   */
  getTriggeredJobRun2(jobName: string, runId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param runId
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJobRun2(jobName: string, runId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJobRun2(jobName: string, runId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJobRun2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        runId,
        options
      },
      getTriggeredJobRun2OperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJobRun2Response>;
  }

  /**
   * @param jobName
   * @param runId
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJobRun3Response>
   */
  getTriggeredJobRun3(jobName: string, runId: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJobRun3Response>;
  /**
   * @param jobName
   * @param runId
   * @param callback The callback
   */
  getTriggeredJobRun3(jobName: string, runId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param runId
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJobRun3(jobName: string, runId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJobRun3(jobName: string, runId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJobRun3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        runId,
        options
      },
      getTriggeredJobRun3OperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJobRun3Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJobSettingsResponse>
   */
  getTriggeredJobSettings(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJobSettingsResponse>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getTriggeredJobSettings(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJobSettings(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJobSettings(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJobSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getTriggeredJobSettingsOperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJobSettingsResponse>;
  }

  /**
   * @param jobName
   * @param jobSettings
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsSetTriggeredJobSettingsResponse>
   */
  setTriggeredJobSettings(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase): Promise<Models.JobsSetTriggeredJobSettingsResponse>;
  /**
   * @param jobName
   * @param jobSettings
   * @param callback The callback
   */
  setTriggeredJobSettings(jobName: string, jobSettings: { [propertyName: string]: any }, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param jobSettings
   * @param options The optional parameters
   * @param callback The callback
   */
  setTriggeredJobSettings(jobName: string, jobSettings: { [propertyName: string]: any }, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  setTriggeredJobSettings(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsSetTriggeredJobSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        jobSettings,
        options
      },
      setTriggeredJobSettingsOperationSpec,
      callback) as Promise<Models.JobsSetTriggeredJobSettingsResponse>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJobSettings1Response>
   */
  getTriggeredJobSettings1(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJobSettings1Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getTriggeredJobSettings1(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJobSettings1(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJobSettings1(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJobSettings1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getTriggeredJobSettings1OperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJobSettings1Response>;
  }

  /**
   * @param jobName
   * @param jobSettings
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsSetTriggeredJobSettings1Response>
   */
  setTriggeredJobSettings1(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase): Promise<Models.JobsSetTriggeredJobSettings1Response>;
  /**
   * @param jobName
   * @param jobSettings
   * @param callback The callback
   */
  setTriggeredJobSettings1(jobName: string, jobSettings: { [propertyName: string]: any }, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param jobSettings
   * @param options The optional parameters
   * @param callback The callback
   */
  setTriggeredJobSettings1(jobName: string, jobSettings: { [propertyName: string]: any }, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  setTriggeredJobSettings1(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsSetTriggeredJobSettings1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        jobSettings,
        options
      },
      setTriggeredJobSettings1OperationSpec,
      callback) as Promise<Models.JobsSetTriggeredJobSettings1Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJobSettings2Response>
   */
  getTriggeredJobSettings2(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJobSettings2Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getTriggeredJobSettings2(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJobSettings2(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJobSettings2(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJobSettings2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getTriggeredJobSettings2OperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJobSettings2Response>;
  }

  /**
   * @param jobName
   * @param jobSettings
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsSetTriggeredJobSettings2Response>
   */
  setTriggeredJobSettings2(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase): Promise<Models.JobsSetTriggeredJobSettings2Response>;
  /**
   * @param jobName
   * @param jobSettings
   * @param callback The callback
   */
  setTriggeredJobSettings2(jobName: string, jobSettings: { [propertyName: string]: any }, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param jobSettings
   * @param options The optional parameters
   * @param callback The callback
   */
  setTriggeredJobSettings2(jobName: string, jobSettings: { [propertyName: string]: any }, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  setTriggeredJobSettings2(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsSetTriggeredJobSettings2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        jobSettings,
        options
      },
      setTriggeredJobSettings2OperationSpec,
      callback) as Promise<Models.JobsSetTriggeredJobSettings2Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetTriggeredJobSettings3Response>
   */
  getTriggeredJobSettings3(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetTriggeredJobSettings3Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getTriggeredJobSettings3(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getTriggeredJobSettings3(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getTriggeredJobSettings3(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetTriggeredJobSettings3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getTriggeredJobSettings3OperationSpec,
      callback) as Promise<Models.JobsGetTriggeredJobSettings3Response>;
  }

  /**
   * @param jobName
   * @param jobSettings
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsSetTriggeredJobSettings3Response>
   */
  setTriggeredJobSettings3(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase): Promise<Models.JobsSetTriggeredJobSettings3Response>;
  /**
   * @param jobName
   * @param jobSettings
   * @param callback The callback
   */
  setTriggeredJobSettings3(jobName: string, jobSettings: { [propertyName: string]: any }, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param jobSettings
   * @param options The optional parameters
   * @param callback The callback
   */
  setTriggeredJobSettings3(jobName: string, jobSettings: { [propertyName: string]: any }, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  setTriggeredJobSettings3(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsSetTriggeredJobSettings3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        jobSettings,
        options
      },
      setTriggeredJobSettings3OperationSpec,
      callback) as Promise<Models.JobsSetTriggeredJobSettings3Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListContinuousJobsResponse>
   */
  listContinuousJobs(options?: msRest.RequestOptionsBase): Promise<Models.JobsListContinuousJobsResponse>;
  /**
   * @param callback The callback
   */
  listContinuousJobs(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listContinuousJobs(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listContinuousJobs(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsListContinuousJobsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listContinuousJobsOperationSpec,
      callback) as Promise<Models.JobsListContinuousJobsResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListContinuousJobs1Response>
   */
  listContinuousJobs1(options?: msRest.RequestOptionsBase): Promise<Models.JobsListContinuousJobs1Response>;
  /**
   * @param callback The callback
   */
  listContinuousJobs1(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listContinuousJobs1(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listContinuousJobs1(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsListContinuousJobs1Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listContinuousJobs1OperationSpec,
      callback) as Promise<Models.JobsListContinuousJobs1Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListContinuousJobs2Response>
   */
  listContinuousJobs2(options?: msRest.RequestOptionsBase): Promise<Models.JobsListContinuousJobs2Response>;
  /**
   * @param callback The callback
   */
  listContinuousJobs2(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listContinuousJobs2(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listContinuousJobs2(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsListContinuousJobs2Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listContinuousJobs2OperationSpec,
      callback) as Promise<Models.JobsListContinuousJobs2Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListContinuousJobs3Response>
   */
  listContinuousJobs3(options?: msRest.RequestOptionsBase): Promise<Models.JobsListContinuousJobs3Response>;
  /**
   * @param callback The callback
   */
  listContinuousJobs3(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listContinuousJobs3(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listContinuousJobs3(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsListContinuousJobs3Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listContinuousJobs3OperationSpec,
      callback) as Promise<Models.JobsListContinuousJobs3Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetContinuousJobResponse>
   */
  getContinuousJob(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetContinuousJobResponse>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getContinuousJob(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getContinuousJob(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getContinuousJob(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetContinuousJobResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getContinuousJobOperationSpec,
      callback) as Promise<Models.JobsGetContinuousJobResponse>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsCreateContinuousJobResponse>
   */
  createContinuousJob(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsCreateContinuousJobResponse>;
  /**
   * @param jobName
   * @param callback The callback
   */
  createContinuousJob(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  createContinuousJob(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createContinuousJob(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsCreateContinuousJobResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      createContinuousJobOperationSpec,
      callback) as Promise<Models.JobsCreateContinuousJobResponse>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRemoveContinuousJobResponse>
   */
  removeContinuousJob(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRemoveContinuousJobResponse>;
  /**
   * @param jobName
   * @param callback The callback
   */
  removeContinuousJob(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  removeContinuousJob(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  removeContinuousJob(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRemoveContinuousJobResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      removeContinuousJobOperationSpec,
      callback) as Promise<Models.JobsRemoveContinuousJobResponse>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetContinuousJob1Response>
   */
  getContinuousJob1(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetContinuousJob1Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getContinuousJob1(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getContinuousJob1(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getContinuousJob1(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetContinuousJob1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getContinuousJob1OperationSpec,
      callback) as Promise<Models.JobsGetContinuousJob1Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsCreateContinuousJob1Response>
   */
  createContinuousJob1(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsCreateContinuousJob1Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  createContinuousJob1(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  createContinuousJob1(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createContinuousJob1(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsCreateContinuousJob1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      createContinuousJob1OperationSpec,
      callback) as Promise<Models.JobsCreateContinuousJob1Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRemoveContinuousJob1Response>
   */
  removeContinuousJob1(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRemoveContinuousJob1Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  removeContinuousJob1(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  removeContinuousJob1(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  removeContinuousJob1(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRemoveContinuousJob1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      removeContinuousJob1OperationSpec,
      callback) as Promise<Models.JobsRemoveContinuousJob1Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetContinuousJob2Response>
   */
  getContinuousJob2(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetContinuousJob2Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getContinuousJob2(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getContinuousJob2(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getContinuousJob2(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetContinuousJob2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getContinuousJob2OperationSpec,
      callback) as Promise<Models.JobsGetContinuousJob2Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsCreateContinuousJob2Response>
   */
  createContinuousJob2(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsCreateContinuousJob2Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  createContinuousJob2(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  createContinuousJob2(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createContinuousJob2(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsCreateContinuousJob2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      createContinuousJob2OperationSpec,
      callback) as Promise<Models.JobsCreateContinuousJob2Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRemoveContinuousJob2Response>
   */
  removeContinuousJob2(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRemoveContinuousJob2Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  removeContinuousJob2(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  removeContinuousJob2(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  removeContinuousJob2(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRemoveContinuousJob2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      removeContinuousJob2OperationSpec,
      callback) as Promise<Models.JobsRemoveContinuousJob2Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetContinuousJob3Response>
   */
  getContinuousJob3(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetContinuousJob3Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getContinuousJob3(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getContinuousJob3(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getContinuousJob3(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetContinuousJob3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getContinuousJob3OperationSpec,
      callback) as Promise<Models.JobsGetContinuousJob3Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsCreateContinuousJob3Response>
   */
  createContinuousJob3(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsCreateContinuousJob3Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  createContinuousJob3(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  createContinuousJob3(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createContinuousJob3(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsCreateContinuousJob3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      createContinuousJob3OperationSpec,
      callback) as Promise<Models.JobsCreateContinuousJob3Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRemoveContinuousJob3Response>
   */
  removeContinuousJob3(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRemoveContinuousJob3Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  removeContinuousJob3(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  removeContinuousJob3(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  removeContinuousJob3(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRemoveContinuousJob3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      removeContinuousJob3OperationSpec,
      callback) as Promise<Models.JobsRemoveContinuousJob3Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsDisableContinuousJobResponse>
   */
  disableContinuousJob(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsDisableContinuousJobResponse>;
  /**
   * @param jobName
   * @param callback The callback
   */
  disableContinuousJob(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  disableContinuousJob(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  disableContinuousJob(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsDisableContinuousJobResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      disableContinuousJobOperationSpec,
      callback) as Promise<Models.JobsDisableContinuousJobResponse>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsDisableContinuousJob1Response>
   */
  disableContinuousJob1(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsDisableContinuousJob1Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  disableContinuousJob1(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  disableContinuousJob1(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  disableContinuousJob1(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsDisableContinuousJob1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      disableContinuousJob1OperationSpec,
      callback) as Promise<Models.JobsDisableContinuousJob1Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsDisableContinuousJob2Response>
   */
  disableContinuousJob2(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsDisableContinuousJob2Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  disableContinuousJob2(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  disableContinuousJob2(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  disableContinuousJob2(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsDisableContinuousJob2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      disableContinuousJob2OperationSpec,
      callback) as Promise<Models.JobsDisableContinuousJob2Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsDisableContinuousJob3Response>
   */
  disableContinuousJob3(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsDisableContinuousJob3Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  disableContinuousJob3(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  disableContinuousJob3(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  disableContinuousJob3(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsDisableContinuousJob3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      disableContinuousJob3OperationSpec,
      callback) as Promise<Models.JobsDisableContinuousJob3Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsEnableContinuousJobResponse>
   */
  enableContinuousJob(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsEnableContinuousJobResponse>;
  /**
   * @param jobName
   * @param callback The callback
   */
  enableContinuousJob(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  enableContinuousJob(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  enableContinuousJob(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsEnableContinuousJobResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      enableContinuousJobOperationSpec,
      callback) as Promise<Models.JobsEnableContinuousJobResponse>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsEnableContinuousJob1Response>
   */
  enableContinuousJob1(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsEnableContinuousJob1Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  enableContinuousJob1(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  enableContinuousJob1(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  enableContinuousJob1(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsEnableContinuousJob1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      enableContinuousJob1OperationSpec,
      callback) as Promise<Models.JobsEnableContinuousJob1Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsEnableContinuousJob2Response>
   */
  enableContinuousJob2(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsEnableContinuousJob2Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  enableContinuousJob2(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  enableContinuousJob2(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  enableContinuousJob2(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsEnableContinuousJob2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      enableContinuousJob2OperationSpec,
      callback) as Promise<Models.JobsEnableContinuousJob2Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsEnableContinuousJob3Response>
   */
  enableContinuousJob3(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsEnableContinuousJob3Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  enableContinuousJob3(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  enableContinuousJob3(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  enableContinuousJob3(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsEnableContinuousJob3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      enableContinuousJob3OperationSpec,
      callback) as Promise<Models.JobsEnableContinuousJob3Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetContinuousJobSettingsResponse>
   */
  getContinuousJobSettings(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetContinuousJobSettingsResponse>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getContinuousJobSettings(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getContinuousJobSettings(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getContinuousJobSettings(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetContinuousJobSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getContinuousJobSettingsOperationSpec,
      callback) as Promise<Models.JobsGetContinuousJobSettingsResponse>;
  }

  /**
   * @param jobName
   * @param jobSettings
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsSetContinuousJobSettingsResponse>
   */
  setContinuousJobSettings(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase): Promise<Models.JobsSetContinuousJobSettingsResponse>;
  /**
   * @param jobName
   * @param jobSettings
   * @param callback The callback
   */
  setContinuousJobSettings(jobName: string, jobSettings: { [propertyName: string]: any }, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param jobSettings
   * @param options The optional parameters
   * @param callback The callback
   */
  setContinuousJobSettings(jobName: string, jobSettings: { [propertyName: string]: any }, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  setContinuousJobSettings(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsSetContinuousJobSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        jobSettings,
        options
      },
      setContinuousJobSettingsOperationSpec,
      callback) as Promise<Models.JobsSetContinuousJobSettingsResponse>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetContinuousJobSettings1Response>
   */
  getContinuousJobSettings1(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetContinuousJobSettings1Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getContinuousJobSettings1(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getContinuousJobSettings1(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getContinuousJobSettings1(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetContinuousJobSettings1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getContinuousJobSettings1OperationSpec,
      callback) as Promise<Models.JobsGetContinuousJobSettings1Response>;
  }

  /**
   * @param jobName
   * @param jobSettings
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsSetContinuousJobSettings1Response>
   */
  setContinuousJobSettings1(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase): Promise<Models.JobsSetContinuousJobSettings1Response>;
  /**
   * @param jobName
   * @param jobSettings
   * @param callback The callback
   */
  setContinuousJobSettings1(jobName: string, jobSettings: { [propertyName: string]: any }, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param jobSettings
   * @param options The optional parameters
   * @param callback The callback
   */
  setContinuousJobSettings1(jobName: string, jobSettings: { [propertyName: string]: any }, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  setContinuousJobSettings1(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsSetContinuousJobSettings1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        jobSettings,
        options
      },
      setContinuousJobSettings1OperationSpec,
      callback) as Promise<Models.JobsSetContinuousJobSettings1Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetContinuousJobSettings2Response>
   */
  getContinuousJobSettings2(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetContinuousJobSettings2Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getContinuousJobSettings2(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getContinuousJobSettings2(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getContinuousJobSettings2(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetContinuousJobSettings2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getContinuousJobSettings2OperationSpec,
      callback) as Promise<Models.JobsGetContinuousJobSettings2Response>;
  }

  /**
   * @param jobName
   * @param jobSettings
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsSetContinuousJobSettings2Response>
   */
  setContinuousJobSettings2(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase): Promise<Models.JobsSetContinuousJobSettings2Response>;
  /**
   * @param jobName
   * @param jobSettings
   * @param callback The callback
   */
  setContinuousJobSettings2(jobName: string, jobSettings: { [propertyName: string]: any }, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param jobSettings
   * @param options The optional parameters
   * @param callback The callback
   */
  setContinuousJobSettings2(jobName: string, jobSettings: { [propertyName: string]: any }, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  setContinuousJobSettings2(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsSetContinuousJobSettings2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        jobSettings,
        options
      },
      setContinuousJobSettings2OperationSpec,
      callback) as Promise<Models.JobsSetContinuousJobSettings2Response>;
  }

  /**
   * @param jobName
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetContinuousJobSettings3Response>
   */
  getContinuousJobSettings3(jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetContinuousJobSettings3Response>;
  /**
   * @param jobName
   * @param callback The callback
   */
  getContinuousJobSettings3(jobName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param options The optional parameters
   * @param callback The callback
   */
  getContinuousJobSettings3(jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getContinuousJobSettings3(jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsGetContinuousJobSettings3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        options
      },
      getContinuousJobSettings3OperationSpec,
      callback) as Promise<Models.JobsGetContinuousJobSettings3Response>;
  }

  /**
   * @param jobName
   * @param jobSettings
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsSetContinuousJobSettings3Response>
   */
  setContinuousJobSettings3(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase): Promise<Models.JobsSetContinuousJobSettings3Response>;
  /**
   * @param jobName
   * @param jobSettings
   * @param callback The callback
   */
  setContinuousJobSettings3(jobName: string, jobSettings: { [propertyName: string]: any }, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param jobSettings
   * @param options The optional parameters
   * @param callback The callback
   */
  setContinuousJobSettings3(jobName: string, jobSettings: { [propertyName: string]: any }, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  setContinuousJobSettings3(jobName: string, jobSettings: { [propertyName: string]: any }, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsSetContinuousJobSettings3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        jobSettings,
        options
      },
      setContinuousJobSettings3OperationSpec,
      callback) as Promise<Models.JobsSetContinuousJobSettings3Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthroughResponse>
   */
  requestPassthrough(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthroughResponse>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthroughResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthroughOperationSpec,
      callback) as Promise<Models.JobsRequestPassthroughResponse>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough1Response>
   */
  requestPassthrough1(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough1Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough1(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough1(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough1(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough1Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough1OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough1Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough2Response>
   */
  requestPassthrough2(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough2Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough2(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough2(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough2(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough2Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough2OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough2Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough3Response>
   */
  requestPassthrough3(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough3Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough3(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough3(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough3(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough3Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough3OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough3Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough4Response>
   */
  requestPassthrough4(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough4Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough4(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough4(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough4(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough4Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough4OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough4Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough5Response>
   */
  requestPassthrough5(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough5Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough5(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough5(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough5(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough5Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough5OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough5Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough6Response>
   */
  requestPassthrough6(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough6Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough6(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough6(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough6(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough6Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough6OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough6Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough7Response>
   */
  requestPassthrough7(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough7Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough7(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough7(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough7(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough7Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough7OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough7Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough8Response>
   */
  requestPassthrough8(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough8Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough8(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough8(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough8(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough8Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough8OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough8Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough9Response>
   */
  requestPassthrough9(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough9Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough9(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough9(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough9(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough9Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough9OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough9Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough10Response>
   */
  requestPassthrough10(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough10Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough10(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough10(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough10(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough10Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough10OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough10Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough11Response>
   */
  requestPassthrough11(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough11Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough11(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough11(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough11(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough11Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough11OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough11Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough12Response>
   */
  requestPassthrough12(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough12Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough12(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough12(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough12(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough12Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough12OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough12Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough13Response>
   */
  requestPassthrough13(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough13Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough13(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough13(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough13(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough13Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough13OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough13Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough14Response>
   */
  requestPassthrough14(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough14Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough14(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough14(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough14(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough14Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough14OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough14Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough15Response>
   */
  requestPassthrough15(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough15Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough15(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough15(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough15(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough15Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough15OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough15Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough16Response>
   */
  requestPassthrough16(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough16Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough16(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough16(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough16(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough16Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough16OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough16Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough17Response>
   */
  requestPassthrough17(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough17Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough17(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough17(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough17(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough17Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough17OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough17Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough18Response>
   */
  requestPassthrough18(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough18Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough18(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough18(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough18(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough18Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough18OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough18Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough19Response>
   */
  requestPassthrough19(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough19Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough19(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough19(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough19(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough19Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough19OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough19Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough20Response>
   */
  requestPassthrough20(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough20Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough20(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough20(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough20(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough20Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough20OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough20Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough21Response>
   */
  requestPassthrough21(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough21Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough21(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough21(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough21(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough21Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough21OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough21Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough22Response>
   */
  requestPassthrough22(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough22Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough22(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough22(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough22(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough22Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough22OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough22Response>;
  }

  /**
   * @param jobName
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsRequestPassthrough23Response>
   */
  requestPassthrough23(jobName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsRequestPassthrough23Response>;
  /**
   * @param jobName
   * @param path
   * @param callback The callback
   */
  requestPassthrough23(jobName: string, path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param jobName
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  requestPassthrough23(jobName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  requestPassthrough23(jobName: string, path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsRequestPassthrough23Response> {
    return this.client.sendOperationRequest(
      {
        jobName,
        path,
        options
      },
      requestPassthrough23OperationSpec,
      callback) as Promise<Models.JobsRequestPassthrough23Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListTriggeredJobsInSwaggerFormatResponse>
   */
  listTriggeredJobsInSwaggerFormat(options?: msRest.RequestOptionsBase): Promise<Models.JobsListTriggeredJobsInSwaggerFormatResponse>;
  /**
   * @param callback The callback
   */
  listTriggeredJobsInSwaggerFormat(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listTriggeredJobsInSwaggerFormat(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listTriggeredJobsInSwaggerFormat(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.JobsListTriggeredJobsInSwaggerFormatResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listTriggeredJobsInSwaggerFormatOperationSpec,
      callback) as Promise<Models.JobsListTriggeredJobsInSwaggerFormatResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listAllJobsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/webjobs",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const listAllJobs1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/jobs",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const listAllJobs2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const listTriggeredJobsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/triggeredwebjobs",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const listTriggeredJobs1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/triggeredjobs",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const listTriggeredJobs2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/triggered",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const listTriggeredJobs3OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/jobs/triggered",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/triggeredwebjobs/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const createTriggeredJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/triggeredwebjobs/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const removeTriggeredJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/triggeredwebjobs/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJob1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/triggeredjobs/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const createTriggeredJob1OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/triggeredjobs/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const removeTriggeredJob1OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/triggeredjobs/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJob2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/triggered/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const createTriggeredJob2OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "jobs/triggered/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const removeTriggeredJob2OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "jobs/triggered/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJob3OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/jobs/triggered/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const createTriggeredJob3OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/jobs/triggered/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const removeTriggeredJob3OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/jobs/triggered/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const invokeTriggeredJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/triggeredwebjobs/{jobName}/run",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const invokeTriggeredJob1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/triggeredjobs/{jobName}/run",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const invokeTriggeredJob2OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "jobs/triggered/{jobName}/run",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const invokeTriggeredJob3OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/jobs/triggered/{jobName}/run",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJobHistoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/triggeredwebjobs/{jobName}/history",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJobHistory1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/triggeredjobs/{jobName}/history",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJobHistory2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/triggered/{jobName}/history",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJobHistory3OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/jobs/triggered/{jobName}/history",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJobRunOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/triggeredwebjobs/{jobName}/history/{runId}",
  urlParameters: [
    Parameters.jobName,
    Parameters.runId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJobRun1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/triggeredjobs/{jobName}/history/{runId}",
  urlParameters: [
    Parameters.jobName,
    Parameters.runId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJobRun2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/triggered/{jobName}/history/{runId}",
  urlParameters: [
    Parameters.jobName,
    Parameters.runId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJobRun3OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/jobs/triggered/{jobName}/history/{runId}",
  urlParameters: [
    Parameters.jobName,
    Parameters.runId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJobSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/triggeredwebjobs/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const setTriggeredJobSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/triggeredwebjobs/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  requestBody: {
    parameterPath: "jobSettings",
    mapper: {
      required: true,
      serializedName: "jobSettings",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Object"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJobSettings1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/triggeredjobs/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const setTriggeredJobSettings1OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/triggeredjobs/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  requestBody: {
    parameterPath: "jobSettings",
    mapper: {
      required: true,
      serializedName: "jobSettings",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Object"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJobSettings2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/triggered/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const setTriggeredJobSettings2OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "jobs/triggered/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  requestBody: {
    parameterPath: "jobSettings",
    mapper: {
      required: true,
      serializedName: "jobSettings",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Object"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getTriggeredJobSettings3OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/jobs/triggered/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const setTriggeredJobSettings3OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/jobs/triggered/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  requestBody: {
    parameterPath: "jobSettings",
    mapper: {
      required: true,
      serializedName: "jobSettings",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Object"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const listContinuousJobsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/continuouswebjobs",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const listContinuousJobs1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/continuousjobs",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const listContinuousJobs2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/continuous",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const listContinuousJobs3OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/jobs/continuous",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getContinuousJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/continuouswebjobs/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const createContinuousJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/continuouswebjobs/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const removeContinuousJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/continuouswebjobs/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getContinuousJob1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/continuousjobs/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const createContinuousJob1OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/continuousjobs/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const removeContinuousJob1OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/continuousjobs/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getContinuousJob2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/continuous/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const createContinuousJob2OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "jobs/continuous/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const removeContinuousJob2OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "jobs/continuous/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getContinuousJob3OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/jobs/continuous/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const createContinuousJob3OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/jobs/continuous/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const removeContinuousJob3OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/jobs/continuous/{jobName}",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const disableContinuousJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/continuouswebjobs/{jobName}/stop",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const disableContinuousJob1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/continuousjobs/{jobName}/stop",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const disableContinuousJob2OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "jobs/continuous/{jobName}/stop",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const disableContinuousJob3OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/jobs/continuous/{jobName}/stop",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const enableContinuousJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/continuouswebjobs/{jobName}/start",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const enableContinuousJob1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/continuousjobs/{jobName}/start",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const enableContinuousJob2OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "jobs/continuous/{jobName}/start",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const enableContinuousJob3OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/jobs/continuous/{jobName}/start",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getContinuousJobSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/continuouswebjobs/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const setContinuousJobSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/continuouswebjobs/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  requestBody: {
    parameterPath: "jobSettings",
    mapper: {
      required: true,
      serializedName: "jobSettings",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Object"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getContinuousJobSettings1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/continuousjobs/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const setContinuousJobSettings1OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/continuousjobs/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  requestBody: {
    parameterPath: "jobSettings",
    mapper: {
      required: true,
      serializedName: "jobSettings",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Object"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getContinuousJobSettings2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/continuous/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const setContinuousJobSettings2OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "jobs/continuous/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  requestBody: {
    parameterPath: "jobSettings",
    mapper: {
      required: true,
      serializedName: "jobSettings",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Object"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getContinuousJobSettings3OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/jobs/continuous/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const setContinuousJobSettings3OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/jobs/continuous/{jobName}/settings",
  urlParameters: [
    Parameters.jobName
  ],
  requestBody: {
    parameterPath: "jobSettings",
    mapper: {
      required: true,
      serializedName: "jobSettings",
      type: {
        name: "Dictionary",
        value: {
          type: {
            name: "Object"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthroughOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/continuouswebjobs/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough1OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/continuouswebjobs/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough2OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/continuouswebjobs/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough3OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/continuouswebjobs/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough4OperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "api/continuouswebjobs/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough5OperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/continuouswebjobs/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough6OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/continuousjobs/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough7OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/continuousjobs/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough8OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/continuousjobs/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough9OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/continuousjobs/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough10OperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "api/continuousjobs/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough11OperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/continuousjobs/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough12OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/continuous/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough13OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "jobs/continuous/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough14OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "jobs/continuous/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough15OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "jobs/continuous/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough16OperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "jobs/continuous/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough17OperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "jobs/continuous/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough18OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/jobs/continuous/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough19OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/jobs/continuous/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough20OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/jobs/continuous/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough21OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/jobs/continuous/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough22OperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "api/jobs/continuous/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const requestPassthrough23OperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/jobs/continuous/{jobName}/passthrough/{path}",
  urlParameters: [
    Parameters.jobName,
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const listTriggeredJobsInSwaggerFormatOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/triggeredwebjobsswagger",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};
