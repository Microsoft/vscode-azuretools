/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/liveScmMappers";
import * as Parameters from "../models/parameters";
import { KuduClientContext } from "../kuduClientContext";

/** Class representing a LiveScm. */
export class LiveScm {
  private readonly client: KuduClientContext;

  /**
   * Create a LiveScm.
   * @param {KuduClientContext} client Reference to the service client.
   */
  constructor(client: KuduClientContext) {
    this.client = client;
  }

  /**
   * @param request
   * @param [options] The optional parameters
   * @returns Promise<Models.LiveScmGetRepositoryInfoResponse>
   */
  getRepositoryInfo(request: string, options?: msRest.RequestOptionsBase): Promise<Models.LiveScmGetRepositoryInfoResponse>;
  /**
   * @param request
   * @param callback The callback
   */
  getRepositoryInfo(request: string, callback: msRest.ServiceCallback<Models.RepositoryInfo>): void;
  /**
   * @param request
   * @param options The optional parameters
   * @param callback The callback
   */
  getRepositoryInfo(request: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RepositoryInfo>): void;
  getRepositoryInfo(request: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RepositoryInfo>, callback?: msRest.ServiceCallback<Models.RepositoryInfo>): Promise<Models.LiveScmGetRepositoryInfoResponse> {
    return this.client.sendOperationRequest(
      {
        request,
        options
      },
      getRepositoryInfoOperationSpec,
      callback) as Promise<Models.LiveScmGetRepositoryInfoResponse>;
  }

  /**
   * @param request
   * @param [options] The optional parameters
   * @returns Promise<Models.LiveScmGetRepositoryInfo1Response>
   */
  getRepositoryInfo1(request: string, options?: msRest.RequestOptionsBase): Promise<Models.LiveScmGetRepositoryInfo1Response>;
  /**
   * @param request
   * @param callback The callback
   */
  getRepositoryInfo1(request: string, callback: msRest.ServiceCallback<Models.RepositoryInfo>): void;
  /**
   * @param request
   * @param options The optional parameters
   * @param callback The callback
   */
  getRepositoryInfo1(request: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RepositoryInfo>): void;
  getRepositoryInfo1(request: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RepositoryInfo>, callback?: msRest.ServiceCallback<Models.RepositoryInfo>): Promise<Models.LiveScmGetRepositoryInfo1Response> {
    return this.client.sendOperationRequest(
      {
        request,
        options
      },
      getRepositoryInfo1OperationSpec,
      callback) as Promise<Models.LiveScmGetRepositoryInfo1Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  clean(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  clean(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  clean(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  clean(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      cleanOperationSpec,
      callback);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  clean1(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  clean1(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  clean1(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  clean1(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      clean1OperationSpec,
      callback);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(options?: Models.LiveScmDeleteMethodOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  deleteMethod(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(options: Models.LiveScmDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(options?: Models.LiveScmDeleteMethodOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  delete1(options?: Models.LiveScmDelete1OptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  delete1(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  delete1(options: Models.LiveScmDelete1OptionalParams, callback: msRest.ServiceCallback<void>): void;
  delete1(options?: Models.LiveScmDelete1OptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      delete1OperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getRepositoryInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "scm/info",
  queryParameters: [
    Parameters.request
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RepositoryInfo
    },
    default: {}
  },
  serializer
};

const getRepositoryInfo1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/scm/info",
  queryParameters: [
    Parameters.request
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RepositoryInfo
    },
    default: {}
  },
  serializer
};

const cleanOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "scm/clean",
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const clean1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/scm/clean",
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "scm",
  queryParameters: [
    Parameters.deleteWebRoot,
    Parameters.ignoreErrors
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const delete1OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/scm",
  queryParameters: [
    Parameters.deleteWebRoot,
    Parameters.ignoreErrors
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};
