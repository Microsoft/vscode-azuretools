/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/error404Mappers";
import * as Parameters from "../models/parameters";
import { KuduClientContext } from "../kuduClientContext";

/** Class representing a Error404. */
export class Error404 {
  private readonly client: KuduClientContext;

  /**
   * Create a Error404.
   * @param {KuduClientContext} client Reference to the service client.
   */
  constructor(client: KuduClientContext) {
    this.client = client;
  }

  /**
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.Error404HandleResponse>
   */
  handle(path: string, options?: msRest.RequestOptionsBase): Promise<Models.Error404HandleResponse>;
  /**
   * @param path
   * @param callback The callback
   */
  handle(path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  handle(path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  handle(path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.Error404HandleResponse> {
    return this.client.sendOperationRequest(
      {
        path,
        options
      },
      handleOperationSpec,
      callback) as Promise<Models.Error404HandleResponse>;
  }

  /**
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.Error404Handle1Response>
   */
  handle1(path: string, options?: msRest.RequestOptionsBase): Promise<Models.Error404Handle1Response>;
  /**
   * @param path
   * @param callback The callback
   */
  handle1(path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  handle1(path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  handle1(path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.Error404Handle1Response> {
    return this.client.sendOperationRequest(
      {
        path,
        options
      },
      handle1OperationSpec,
      callback) as Promise<Models.Error404Handle1Response>;
  }

  /**
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.Error404Handle2Response>
   */
  handle2(path: string, options?: msRest.RequestOptionsBase): Promise<Models.Error404Handle2Response>;
  /**
   * @param path
   * @param callback The callback
   */
  handle2(path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  handle2(path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  handle2(path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.Error404Handle2Response> {
    return this.client.sendOperationRequest(
      {
        path,
        options
      },
      handle2OperationSpec,
      callback) as Promise<Models.Error404Handle2Response>;
  }

  /**
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.Error404Handle3Response>
   */
  handle3(path: string, options?: msRest.RequestOptionsBase): Promise<Models.Error404Handle3Response>;
  /**
   * @param path
   * @param callback The callback
   */
  handle3(path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  handle3(path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  handle3(path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.Error404Handle3Response> {
    return this.client.sendOperationRequest(
      {
        path,
        options
      },
      handle3OperationSpec,
      callback) as Promise<Models.Error404Handle3Response>;
  }

  /**
   * @param path
   * @param [options] The optional parameters
   * @returns Promise<Models.Error404Handle4Response>
   */
  handle4(path: string, options?: msRest.RequestOptionsBase): Promise<Models.Error404Handle4Response>;
  /**
   * @param path
   * @param callback The callback
   */
  handle4(path: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param path
   * @param options The optional parameters
   * @param callback The callback
   */
  handle4(path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  handle4(path: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.Error404Handle4Response> {
    return this.client.sendOperationRequest(
      {
        path,
        options
      },
      handle4OperationSpec,
      callback) as Promise<Models.Error404Handle4Response>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const handleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{path}",
  urlParameters: [
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const handle1OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{path}",
  urlParameters: [
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const handle2OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{path}",
  urlParameters: [
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const handle3OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{path}",
  urlParameters: [
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const handle4OperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{path}",
  urlParameters: [
    Parameters.path
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};
