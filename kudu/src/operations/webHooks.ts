/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/webHooksMappers";
import * as Parameters from "../models/parameters";
import { KuduClientContext } from "../kuduClientContext";

/** Class representing a WebHooks. */
export class WebHooks {
  private readonly client: KuduClientContext;

  /**
   * Create a WebHooks.
   * @param {KuduClientContext} client Reference to the service client.
   */
  constructor(client: KuduClientContext) {
    this.client = client;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.WebHooksGetWebHookResponse>
   */
  getWebHook(id: string, options?: msRest.RequestOptionsBase): Promise<Models.WebHooksGetWebHookResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getWebHook(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getWebHook(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getWebHook(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.WebHooksGetWebHookResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getWebHookOperationSpec,
      callback) as Promise<Models.WebHooksGetWebHookResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.WebHooksUnsubscribeResponse>
   */
  unsubscribe(id: string, options?: msRest.RequestOptionsBase): Promise<Models.WebHooksUnsubscribeResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  unsubscribe(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  unsubscribe(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  unsubscribe(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.WebHooksUnsubscribeResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      unsubscribeOperationSpec,
      callback) as Promise<Models.WebHooksUnsubscribeResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.WebHooksGetWebHook1Response>
   */
  getWebHook1(id: string, options?: msRest.RequestOptionsBase): Promise<Models.WebHooksGetWebHook1Response>;
  /**
   * @param id
   * @param callback The callback
   */
  getWebHook1(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getWebHook1(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getWebHook1(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.WebHooksGetWebHook1Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getWebHook1OperationSpec,
      callback) as Promise<Models.WebHooksGetWebHook1Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.WebHooksUnsubscribe1Response>
   */
  unsubscribe1(id: string, options?: msRest.RequestOptionsBase): Promise<Models.WebHooksUnsubscribe1Response>;
  /**
   * @param id
   * @param callback The callback
   */
  unsubscribe1(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  unsubscribe1(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  unsubscribe1(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.WebHooksUnsubscribe1Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      unsubscribe1OperationSpec,
      callback) as Promise<Models.WebHooksUnsubscribe1Response>;
  }

  /**
   * @param hookEventType
   * @param eventContent
   * @param [options] The optional parameters
   * @returns Promise<Models.WebHooksPublishEventResponse>
   */
  publishEvent(hookEventType: string, eventContent: any, options?: msRest.RequestOptionsBase): Promise<Models.WebHooksPublishEventResponse>;
  /**
   * @param hookEventType
   * @param eventContent
   * @param callback The callback
   */
  publishEvent(hookEventType: string, eventContent: any, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param hookEventType
   * @param eventContent
   * @param options The optional parameters
   * @param callback The callback
   */
  publishEvent(hookEventType: string, eventContent: any, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  publishEvent(hookEventType: string, eventContent: any, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.WebHooksPublishEventResponse> {
    return this.client.sendOperationRequest(
      {
        hookEventType,
        eventContent,
        options
      },
      publishEventOperationSpec,
      callback) as Promise<Models.WebHooksPublishEventResponse>;
  }

  /**
   * @param hookEventType
   * @param eventContent
   * @param [options] The optional parameters
   * @returns Promise<Models.WebHooksPublishEvent1Response>
   */
  publishEvent1(hookEventType: string, eventContent: any, options?: msRest.RequestOptionsBase): Promise<Models.WebHooksPublishEvent1Response>;
  /**
   * @param hookEventType
   * @param eventContent
   * @param callback The callback
   */
  publishEvent1(hookEventType: string, eventContent: any, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param hookEventType
   * @param eventContent
   * @param options The optional parameters
   * @param callback The callback
   */
  publishEvent1(hookEventType: string, eventContent: any, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  publishEvent1(hookEventType: string, eventContent: any, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.WebHooksPublishEvent1Response> {
    return this.client.sendOperationRequest(
      {
        hookEventType,
        eventContent,
        options
      },
      publishEvent1OperationSpec,
      callback) as Promise<Models.WebHooksPublishEvent1Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.WebHooksGetWebHooksResponse>
   */
  getWebHooks(options?: msRest.RequestOptionsBase): Promise<Models.WebHooksGetWebHooksResponse>;
  /**
   * @param callback The callback
   */
  getWebHooks(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getWebHooks(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getWebHooks(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.WebHooksGetWebHooksResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getWebHooksOperationSpec,
      callback) as Promise<Models.WebHooksGetWebHooksResponse>;
  }

  /**
   * @param webHook
   * @param [options] The optional parameters
   * @returns Promise<Models.WebHooksSubscribeResponse>
   */
  subscribe(webHook: Models.WebHook, options?: msRest.RequestOptionsBase): Promise<Models.WebHooksSubscribeResponse>;
  /**
   * @param webHook
   * @param callback The callback
   */
  subscribe(webHook: Models.WebHook, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param webHook
   * @param options The optional parameters
   * @param callback The callback
   */
  subscribe(webHook: Models.WebHook, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  subscribe(webHook: Models.WebHook, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.WebHooksSubscribeResponse> {
    return this.client.sendOperationRequest(
      {
        webHook,
        options
      },
      subscribeOperationSpec,
      callback) as Promise<Models.WebHooksSubscribeResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.WebHooksGetWebHooks1Response>
   */
  getWebHooks1(options?: msRest.RequestOptionsBase): Promise<Models.WebHooksGetWebHooks1Response>;
  /**
   * @param callback The callback
   */
  getWebHooks1(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getWebHooks1(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getWebHooks1(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.WebHooksGetWebHooks1Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getWebHooks1OperationSpec,
      callback) as Promise<Models.WebHooksGetWebHooks1Response>;
  }

  /**
   * @param webHook
   * @param [options] The optional parameters
   * @returns Promise<Models.WebHooksSubscribe1Response>
   */
  subscribe1(webHook: Models.WebHook, options?: msRest.RequestOptionsBase): Promise<Models.WebHooksSubscribe1Response>;
  /**
   * @param webHook
   * @param callback The callback
   */
  subscribe1(webHook: Models.WebHook, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param webHook
   * @param options The optional parameters
   * @param callback The callback
   */
  subscribe1(webHook: Models.WebHook, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  subscribe1(webHook: Models.WebHook, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.WebHooksSubscribe1Response> {
    return this.client.sendOperationRequest(
      {
        webHook,
        options
      },
      subscribe1OperationSpec,
      callback) as Promise<Models.WebHooksSubscribe1Response>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getWebHookOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "hooks/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const unsubscribeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "hooks/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getWebHook1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/hooks/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const unsubscribe1OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/hooks/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const publishEventOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "hooks/publish/{hookEventType}",
  urlParameters: [
    Parameters.hookEventType
  ],
  requestBody: {
    parameterPath: "eventContent",
    mapper: {
      required: true,
      serializedName: "eventContent",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const publishEvent1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/hooks/publish/{hookEventType}",
  urlParameters: [
    Parameters.hookEventType
  ],
  requestBody: {
    parameterPath: "eventContent",
    mapper: {
      required: true,
      serializedName: "eventContent",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getWebHooksOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "hooks",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const subscribeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "hooks",
  requestBody: {
    parameterPath: "webHook",
    mapper: {
      ...Mappers.WebHook,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getWebHooks1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/hooks",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const subscribe1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/hooks",
  requestBody: {
    parameterPath: "webHook",
    mapper: {
      ...Mappers.WebHook,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};
