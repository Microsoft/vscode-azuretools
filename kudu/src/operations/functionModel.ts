/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/functionModelMappers";
import * as Parameters from "../models/parameters";
import { KuduClientContext } from "../kuduClientContext";

/** Class representing a FunctionModel. */
export class FunctionModel {
  private readonly client: KuduClientContext;

  /**
   * Create a FunctionModel.
   * @param {KuduClientContext} client Reference to the service client.
   */
  constructor(client: KuduClientContext) {
    this.client = client;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.FunctionModelGetHostSettingsResponse>
   */
  getHostSettings(options?: msRest.RequestOptionsBase): Promise<Models.FunctionModelGetHostSettingsResponse>;
  /**
   * @param callback The callback
   */
  getHostSettings(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostSettings(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getHostSettings(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FunctionModelGetHostSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getHostSettingsOperationSpec,
      callback) as Promise<Models.FunctionModelGetHostSettingsResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.FunctionModelPutHostSettingsResponse>
   */
  putHostSettings(options?: msRest.RequestOptionsBase): Promise<Models.FunctionModelPutHostSettingsResponse>;
  /**
   * @param callback The callback
   */
  putHostSettings(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  putHostSettings(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  putHostSettings(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FunctionModelPutHostSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      putHostSettingsOperationSpec,
      callback) as Promise<Models.FunctionModelPutHostSettingsResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.FunctionModelSyncTriggersResponse>
   */
  syncTriggers(options?: msRest.RequestOptionsBase): Promise<Models.FunctionModelSyncTriggersResponse>;
  /**
   * @param callback The callback
   */
  syncTriggers(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  syncTriggers(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  syncTriggers(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FunctionModelSyncTriggersResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      syncTriggersOperationSpec,
      callback) as Promise<Models.FunctionModelSyncTriggersResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.FunctionModelSyncTriggers1Response>
   */
  syncTriggers1(options?: msRest.RequestOptionsBase): Promise<Models.FunctionModelSyncTriggers1Response>;
  /**
   * @param callback The callback
   */
  syncTriggers1(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  syncTriggers1(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  syncTriggers1(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FunctionModelSyncTriggers1Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      syncTriggers1OperationSpec,
      callback) as Promise<Models.FunctionModelSyncTriggers1Response>;
  }

  /**
   * @param name
   * @param [options] The optional parameters
   * @returns Promise<Models.FunctionModelGetResponse>
   */
  get(name: string, options?: msRest.RequestOptionsBase): Promise<Models.FunctionModelGetResponse>;
  /**
   * @param name
   * @param callback The callback
   */
  get(name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  get(name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FunctionModelGetResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.FunctionModelGetResponse>;
  }

  /**
   * @param name
   * @param [options] The optional parameters
   * @returns Promise<Models.FunctionModelCreateOrUpdateResponse>
   */
  createOrUpdate(name: string, options?: msRest.RequestOptionsBase): Promise<Models.FunctionModelCreateOrUpdateResponse>;
  /**
   * @param name
   * @param callback The callback
   */
  createOrUpdate(name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param name
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createOrUpdate(name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FunctionModelCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.FunctionModelCreateOrUpdateResponse>;
  }

  /**
   * @param name
   * @param [options] The optional parameters
   * @returns Promise<Models.FunctionModelDeleteMethodResponse>
   */
  deleteMethod(name: string, options?: msRest.RequestOptionsBase): Promise<Models.FunctionModelDeleteMethodResponse>;
  /**
   * @param name
   * @param callback The callback
   */
  deleteMethod(name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param name
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteMethod(name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FunctionModelDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.FunctionModelDeleteMethodResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.FunctionModelListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.FunctionModelListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.FunctionEnvelope[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionEnvelope[]>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FunctionEnvelope[]>, callback?: msRest.ServiceCallback<Models.FunctionEnvelope[]>): Promise<Models.FunctionModelListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.FunctionModelListResponse>;
  }

  /**
   * @param name
   * @param [options] The optional parameters
   * @returns Promise<Models.FunctionModelGetSecretsResponse>
   */
  getSecrets(name: string, options?: msRest.RequestOptionsBase): Promise<Models.FunctionModelGetSecretsResponse>;
  /**
   * @param name
   * @param callback The callback
   */
  getSecrets(name: string, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
  /**
   * @param name
   * @param options The optional parameters
   * @param callback The callback
   */
  getSecrets(name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
  getSecrets(name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FunctionSecrets>, callback?: msRest.ServiceCallback<Models.FunctionSecrets>): Promise<Models.FunctionModelGetSecretsResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        options
      },
      getSecretsOperationSpec,
      callback) as Promise<Models.FunctionModelGetSecretsResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.FunctionModelGetMasterKeyResponse>
   */
  getMasterKey(options?: msRest.RequestOptionsBase): Promise<Models.FunctionModelGetMasterKeyResponse>;
  /**
   * @param callback The callback
   */
  getMasterKey(callback: msRest.ServiceCallback<Models.MasterKey>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getMasterKey(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MasterKey>): void;
  getMasterKey(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MasterKey>, callback?: msRest.ServiceCallback<Models.MasterKey>): Promise<Models.FunctionModelGetMasterKeyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getMasterKeyOperationSpec,
      callback) as Promise<Models.FunctionModelGetMasterKeyResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.FunctionModelGetAdminTokenResponse>
   */
  getAdminToken(options?: msRest.RequestOptionsBase): Promise<Models.FunctionModelGetAdminTokenResponse>;
  /**
   * @param callback The callback
   */
  getAdminToken(callback: msRest.ServiceCallback<string>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAdminToken(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getAdminToken(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.FunctionModelGetAdminTokenResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAdminTokenOperationSpec,
      callback) as Promise<Models.FunctionModelGetAdminTokenResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.FunctionModelDownloadFunctionsResponse>
   */
  downloadFunctions(options?: Models.FunctionModelDownloadFunctionsOptionalParams): Promise<Models.FunctionModelDownloadFunctionsResponse>;
  /**
   * @param callback The callback
   */
  downloadFunctions(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  downloadFunctions(options: Models.FunctionModelDownloadFunctionsOptionalParams, callback: msRest.ServiceCallback<any>): void;
  downloadFunctions(options?: Models.FunctionModelDownloadFunctionsOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.FunctionModelDownloadFunctionsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      downloadFunctionsOperationSpec,
      callback) as Promise<Models.FunctionModelDownloadFunctionsResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getHostSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/functions/config",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const putHostSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/functions/config",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const syncTriggersOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/functions/synctriggers",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const syncTriggers1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "functions/listsynctriggers",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/functions/{name}",
  urlParameters: [
    Parameters.name
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/functions/{name}",
  urlParameters: [
    Parameters.name
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/functions/{name}",
  urlParameters: [
    Parameters.name
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    204: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/functions",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FunctionEnvelope"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getSecretsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/functions/{name}/listsecrets",
  urlParameters: [
    Parameters.name
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FunctionSecrets
    },
    default: {}
  },
  serializer
};

const getMasterKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/functions/admin/masterkey",
  responses: {
    200: {
      bodyMapper: Mappers.MasterKey
    },
    default: {}
  },
  serializer
};

const getAdminTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/functions/admin/token",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const downloadFunctionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/functions/admin/download",
  queryParameters: [
    Parameters.includeCsproj,
    Parameters.includeAppSettings
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};
