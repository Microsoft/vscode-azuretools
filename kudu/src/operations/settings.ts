/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/settingsMappers";
import * as Parameters from "../models/parameters";
import { KuduClientContext } from "../kuduClientContext";

/** Class representing a Settings. */
export class Settings {
  private readonly client: KuduClientContext;

  /**
   * Create a Settings.
   * @param {KuduClientContext} client Reference to the service client.
   */
  constructor(client: KuduClientContext) {
    this.client = client;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.SettingsGetAllResponse>
   */
  getAll(options?: msRest.RequestOptionsBase): Promise<Models.SettingsGetAllResponse>;
  /**
   * @param callback The callback
   */
  getAll(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAll(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAll(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SettingsGetAllResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllOperationSpec,
      callback) as Promise<Models.SettingsGetAllResponse>;
  }

  /**
   * @param newSettings
   * @param [options] The optional parameters
   * @returns Promise<Models.SettingsSetResponse>
   */
  set(newSettings: any, options?: msRest.RequestOptionsBase): Promise<Models.SettingsSetResponse>;
  /**
   * @param newSettings
   * @param callback The callback
   */
  set(newSettings: any, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param newSettings
   * @param options The optional parameters
   * @param callback The callback
   */
  set(newSettings: any, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  set(newSettings: any, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SettingsSetResponse> {
    return this.client.sendOperationRequest(
      {
        newSettings,
        options
      },
      setOperationSpec,
      callback) as Promise<Models.SettingsSetResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.SettingsGetAll1Response>
   */
  getAll1(options?: msRest.RequestOptionsBase): Promise<Models.SettingsGetAll1Response>;
  /**
   * @param callback The callback
   */
  getAll1(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAll1(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAll1(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SettingsGetAll1Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAll1OperationSpec,
      callback) as Promise<Models.SettingsGetAll1Response>;
  }

  /**
   * @param newSettings
   * @param [options] The optional parameters
   * @returns Promise<Models.SettingsSet1Response>
   */
  set1(newSettings: any, options?: msRest.RequestOptionsBase): Promise<Models.SettingsSet1Response>;
  /**
   * @param newSettings
   * @param callback The callback
   */
  set1(newSettings: any, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param newSettings
   * @param options The optional parameters
   * @param callback The callback
   */
  set1(newSettings: any, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  set1(newSettings: any, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SettingsSet1Response> {
    return this.client.sendOperationRequest(
      {
        newSettings,
        options
      },
      set1OperationSpec,
      callback) as Promise<Models.SettingsSet1Response>;
  }

  /**
   * @param key
   * @param [options] The optional parameters
   * @returns Promise<Models.SettingsGetResponse>
   */
  get(key: string, options?: msRest.RequestOptionsBase): Promise<Models.SettingsGetResponse>;
  /**
   * @param key
   * @param callback The callback
   */
  get(key: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param key
   * @param options The optional parameters
   * @param callback The callback
   */
  get(key: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  get(key: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SettingsGetResponse> {
    return this.client.sendOperationRequest(
      {
        key,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SettingsGetResponse>;
  }

  /**
   * @param key
   * @param [options] The optional parameters
   * @returns Promise<Models.SettingsDeleteMethodResponse>
   */
  deleteMethod(key: string, options?: msRest.RequestOptionsBase): Promise<Models.SettingsDeleteMethodResponse>;
  /**
   * @param key
   * @param callback The callback
   */
  deleteMethod(key: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param key
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(key: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteMethod(key: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SettingsDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        key,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.SettingsDeleteMethodResponse>;
  }

  /**
   * @param key
   * @param [options] The optional parameters
   * @returns Promise<Models.SettingsGet1Response>
   */
  get1(key: string, options?: msRest.RequestOptionsBase): Promise<Models.SettingsGet1Response>;
  /**
   * @param key
   * @param callback The callback
   */
  get1(key: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param key
   * @param options The optional parameters
   * @param callback The callback
   */
  get1(key: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  get1(key: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SettingsGet1Response> {
    return this.client.sendOperationRequest(
      {
        key,
        options
      },
      get1OperationSpec,
      callback) as Promise<Models.SettingsGet1Response>;
  }

  /**
   * @param key
   * @param [options] The optional parameters
   * @returns Promise<Models.SettingsDelete1Response>
   */
  delete1(key: string, options?: msRest.RequestOptionsBase): Promise<Models.SettingsDelete1Response>;
  /**
   * @param key
   * @param callback The callback
   */
  delete1(key: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param key
   * @param options The optional parameters
   * @param callback The callback
   */
  delete1(key: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  delete1(key: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SettingsDelete1Response> {
    return this.client.sendOperationRequest(
      {
        key,
        options
      },
      delete1OperationSpec,
      callback) as Promise<Models.SettingsDelete1Response>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAllOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "settings",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const setOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "settings",
  requestBody: {
    parameterPath: "newSettings",
    mapper: {
      required: true,
      serializedName: "newSettings",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getAll1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/settings",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const set1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/settings",
  requestBody: {
    parameterPath: "newSettings",
    mapper: {
      required: true,
      serializedName: "newSettings",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "settings/{key}",
  urlParameters: [
    Parameters.key
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "settings/{key}",
  urlParameters: [
    Parameters.key
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const get1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/settings/{key}",
  urlParameters: [
    Parameters.key
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const delete1OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/settings/{key}",
  urlParameters: [
    Parameters.key
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};
