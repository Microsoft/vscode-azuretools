/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/infoRefsMappers";
import * as Parameters from "../models/parameters";
import { KuduClientContext } from "../kuduClientContext";

/** Class representing a InfoRefs. */
export class InfoRefs {
  private readonly client: KuduClientContext;

  /**
   * Create a InfoRefs.
   * @param {KuduClientContext} client Reference to the service client.
   */
  constructor(client: KuduClientContext) {
    this.client = client;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.InfoRefsExecuteResponse>
   */
  execute(options?: Models.InfoRefsExecuteOptionalParams): Promise<Models.InfoRefsExecuteResponse>;
  /**
   * @param callback The callback
   */
  execute(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  execute(options: Models.InfoRefsExecuteOptionalParams, callback: msRest.ServiceCallback<any>): void;
  execute(options?: Models.InfoRefsExecuteOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.InfoRefsExecuteResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      executeOperationSpec,
      callback) as Promise<Models.InfoRefsExecuteResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.InfoRefsExecute1Response>
   */
  execute1(options?: Models.InfoRefsExecute1OptionalParams): Promise<Models.InfoRefsExecute1Response>;
  /**
   * @param callback The callback
   */
  execute1(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  execute1(options: Models.InfoRefsExecute1OptionalParams, callback: msRest.ServiceCallback<any>): void;
  execute1(options?: Models.InfoRefsExecute1OptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.InfoRefsExecute1Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      execute1OperationSpec,
      callback) as Promise<Models.InfoRefsExecute1Response>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const executeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "info/refs",
  queryParameters: [
    Parameters.service
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const execute1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "swagger.git/info/refs",
  queryParameters: [
    Parameters.service
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};
