/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/commandMappers";
import { KuduClientContext } from "../kuduClientContext";

/** Class representing a Command. */
export class Command {
  private readonly client: KuduClientContext;

  /**
   * Create a Command.
   * @param {KuduClientContext} client Reference to the service client.
   */
  constructor(client: KuduClientContext) {
    this.client = client;
  }

  /**
   * @param input
   * @param [options] The optional parameters
   * @returns Promise<Models.CommandExecuteCommandResponse>
   */
  executeCommand(input: Models.CommandInput, options?: msRest.RequestOptionsBase): Promise<Models.CommandExecuteCommandResponse>;
  /**
   * @param input
   * @param callback The callback
   */
  executeCommand(input: Models.CommandInput, callback: msRest.ServiceCallback<Models.CommandResult>): void;
  /**
   * @param input
   * @param options The optional parameters
   * @param callback The callback
   */
  executeCommand(input: Models.CommandInput, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommandResult>): void;
  executeCommand(input: Models.CommandInput, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommandResult>, callback?: msRest.ServiceCallback<Models.CommandResult>): Promise<Models.CommandExecuteCommandResponse> {
    return this.client.sendOperationRequest(
      {
        input,
        options
      },
      executeCommandOperationSpec,
      callback) as Promise<Models.CommandExecuteCommandResponse>;
  }

  /**
   * @param input
   * @param [options] The optional parameters
   * @returns Promise<Models.CommandExecuteCommand1Response>
   */
  executeCommand1(input: Models.CommandInput, options?: msRest.RequestOptionsBase): Promise<Models.CommandExecuteCommand1Response>;
  /**
   * @param input
   * @param callback The callback
   */
  executeCommand1(input: Models.CommandInput, callback: msRest.ServiceCallback<Models.CommandResult>): void;
  /**
   * @param input
   * @param options The optional parameters
   * @param callback The callback
   */
  executeCommand1(input: Models.CommandInput, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommandResult>): void;
  executeCommand1(input: Models.CommandInput, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommandResult>, callback?: msRest.ServiceCallback<Models.CommandResult>): Promise<Models.CommandExecuteCommand1Response> {
    return this.client.sendOperationRequest(
      {
        input,
        options
      },
      executeCommand1OperationSpec,
      callback) as Promise<Models.CommandExecuteCommand1Response>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const executeCommandOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "command",
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.CommandInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CommandResult
    },
    default: {}
  },
  serializer
};

const executeCommand1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/command",
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.CommandInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CommandResult
    },
    default: {}
  },
  serializer
};
