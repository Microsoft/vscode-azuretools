/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/sSHKeyMappers";
import * as Parameters from "../models/parameters";
import { KuduClientContext } from "../kuduClientContext";

/** Class representing a SSHKey. */
export class SSHKey {
  private readonly client: KuduClientContext;

  /**
   * Create a SSHKey.
   * @param {KuduClientContext} client Reference to the service client.
   */
  constructor(client: KuduClientContext) {
    this.client = client;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.SSHKeyGetPublicKeyResponse>
   */
  getPublicKey(options?: Models.SSHKeyGetPublicKeyOptionalParams): Promise<Models.SSHKeyGetPublicKeyResponse>;
  /**
   * @param callback The callback
   */
  getPublicKey(callback: msRest.ServiceCallback<string>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getPublicKey(options: Models.SSHKeyGetPublicKeyOptionalParams, callback: msRest.ServiceCallback<string>): void;
  getPublicKey(options?: Models.SSHKeyGetPublicKeyOptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.SSHKeyGetPublicKeyResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getPublicKeyOperationSpec,
      callback) as Promise<Models.SSHKeyGetPublicKeyResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  setPrivateKey(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  setPrivateKey(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  setPrivateKey(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  setPrivateKey(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      setPrivateKeyOperationSpec,
      callback);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteKeyPair(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  deleteKeyPair(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteKeyPair(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteKeyPair(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      deleteKeyPairOperationSpec,
      callback);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.SSHKeyGetPublicKey1Response>
   */
  getPublicKey1(options?: Models.SSHKeyGetPublicKey1OptionalParams): Promise<Models.SSHKeyGetPublicKey1Response>;
  /**
   * @param callback The callback
   */
  getPublicKey1(callback: msRest.ServiceCallback<string>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getPublicKey1(options: Models.SSHKeyGetPublicKey1OptionalParams, callback: msRest.ServiceCallback<string>): void;
  getPublicKey1(options?: Models.SSHKeyGetPublicKey1OptionalParams | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.SSHKeyGetPublicKey1Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getPublicKey1OperationSpec,
      callback) as Promise<Models.SSHKeyGetPublicKey1Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  setPrivateKey1(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  setPrivateKey1(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  setPrivateKey1(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  setPrivateKey1(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      setPrivateKey1OperationSpec,
      callback);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteKeyPair1(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  deleteKeyPair1(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteKeyPair1(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteKeyPair1(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      deleteKeyPair1OperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getPublicKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "sshkey",
  queryParameters: [
    Parameters.ensurePublicKey
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const setPrivateKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "sshkey",
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const deleteKeyPairOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "sshkey",
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const getPublicKey1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/sshkey",
  queryParameters: [
    Parameters.ensurePublicKey
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const setPrivateKey1OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/sshkey",
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const deleteKeyPair1OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/sshkey",
  responses: {
    204: {},
    default: {}
  },
  serializer
};
