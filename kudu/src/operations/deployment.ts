/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/deploymentMappers";
import * as Parameters from "../models/parameters";
import { KuduClientContext } from "../kuduClientContext";

/** Class representing a Deployment. */
export class Deployment {
  private readonly client: KuduClientContext;

  /**
   * Create a Deployment.
   * @param {KuduClientContext} client Reference to the service client.
   */
  constructor(client: KuduClientContext) {
    this.client = client;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentGetDeployResultsResponse>
   */
  getDeployResults(options?: msRest.RequestOptionsBase): Promise<Models.DeploymentGetDeployResultsResponse>;
  /**
   * @param callback The callback
   */
  getDeployResults(callback: msRest.ServiceCallback<Models.DeployResult[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployResults(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeployResult[]>): void;
  getDeployResults(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeployResult[]>, callback?: msRest.ServiceCallback<Models.DeployResult[]>): Promise<Models.DeploymentGetDeployResultsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDeployResultsOperationSpec,
      callback) as Promise<Models.DeploymentGetDeployResultsResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentGetDeployResults1Response>
   */
  getDeployResults1(options?: msRest.RequestOptionsBase): Promise<Models.DeploymentGetDeployResults1Response>;
  /**
   * @param callback The callback
   */
  getDeployResults1(callback: msRest.ServiceCallback<Models.DeployResult[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployResults1(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeployResult[]>): void;
  getDeployResults1(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeployResult[]>, callback?: msRest.ServiceCallback<Models.DeployResult[]>): Promise<Models.DeploymentGetDeployResults1Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDeployResults1OperationSpec,
      callback) as Promise<Models.DeploymentGetDeployResults1Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentGetResultResponse>
   */
  getResult(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentGetResultResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getResult(id: string, callback: msRest.ServiceCallback<Models.DeployResult>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getResult(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeployResult>): void;
  getResult(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeployResult>, callback?: msRest.ServiceCallback<Models.DeployResult>): Promise<Models.DeploymentGetResultResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getResultOperationSpec,
      callback) as Promise<Models.DeploymentGetResultResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentDeployResponse>
   */
  deploy(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentDeployResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  deploy(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  deploy(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deploy(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DeploymentDeployResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deployOperationSpec,
      callback) as Promise<Models.DeploymentDeployResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  deleteMethod(id: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentGetResult1Response>
   */
  getResult1(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentGetResult1Response>;
  /**
   * @param id
   * @param callback The callback
   */
  getResult1(id: string, callback: msRest.ServiceCallback<Models.DeployResult>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getResult1(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeployResult>): void;
  getResult1(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeployResult>, callback?: msRest.ServiceCallback<Models.DeployResult>): Promise<Models.DeploymentGetResult1Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getResult1OperationSpec,
      callback) as Promise<Models.DeploymentGetResult1Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentDeploy1Response>
   */
  deploy1(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentDeploy1Response>;
  /**
   * @param id
   * @param callback The callback
   */
  deploy1(id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  deploy1(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deploy1(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DeploymentDeploy1Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deploy1OperationSpec,
      callback) as Promise<Models.DeploymentDeploy1Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  delete1(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  delete1(id: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  delete1(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  delete1(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      delete1OperationSpec,
      callback);
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentGetLogEntryResponse>
   */
  getLogEntry(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentGetLogEntryResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getLogEntry(id: string, callback: msRest.ServiceCallback<Models.LogEntry[]>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getLogEntry(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogEntry[]>): void;
  getLogEntry(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogEntry[]>, callback?: msRest.ServiceCallback<Models.LogEntry[]>): Promise<Models.DeploymentGetLogEntryResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getLogEntryOperationSpec,
      callback) as Promise<Models.DeploymentGetLogEntryResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentGetLogEntry1Response>
   */
  getLogEntry1(id: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentGetLogEntry1Response>;
  /**
   * @param id
   * @param callback The callback
   */
  getLogEntry1(id: string, callback: msRest.ServiceCallback<Models.LogEntry[]>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getLogEntry1(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogEntry[]>): void;
  getLogEntry1(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogEntry[]>, callback?: msRest.ServiceCallback<Models.LogEntry[]>): Promise<Models.DeploymentGetLogEntry1Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getLogEntry1OperationSpec,
      callback) as Promise<Models.DeploymentGetLogEntry1Response>;
  }

  /**
   * @param id
   * @param logId
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentGetLogEntryDetailsResponse>
   */
  getLogEntryDetails(id: string, logId: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentGetLogEntryDetailsResponse>;
  /**
   * @param id
   * @param logId
   * @param callback The callback
   */
  getLogEntryDetails(id: string, logId: string, callback: msRest.ServiceCallback<Models.LogEntry[]>): void;
  /**
   * @param id
   * @param logId
   * @param options The optional parameters
   * @param callback The callback
   */
  getLogEntryDetails(id: string, logId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogEntry[]>): void;
  getLogEntryDetails(id: string, logId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogEntry[]>, callback?: msRest.ServiceCallback<Models.LogEntry[]>): Promise<Models.DeploymentGetLogEntryDetailsResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        logId,
        options
      },
      getLogEntryDetailsOperationSpec,
      callback) as Promise<Models.DeploymentGetLogEntryDetailsResponse>;
  }

  /**
   * @param id
   * @param logId
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentGetLogEntryDetails1Response>
   */
  getLogEntryDetails1(id: string, logId: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentGetLogEntryDetails1Response>;
  /**
   * @param id
   * @param logId
   * @param callback The callback
   */
  getLogEntryDetails1(id: string, logId: string, callback: msRest.ServiceCallback<Models.LogEntry[]>): void;
  /**
   * @param id
   * @param logId
   * @param options The optional parameters
   * @param callback The callback
   */
  getLogEntryDetails1(id: string, logId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogEntry[]>): void;
  getLogEntryDetails1(id: string, logId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogEntry[]>, callback?: msRest.ServiceCallback<Models.LogEntry[]>): Promise<Models.DeploymentGetLogEntryDetails1Response> {
    return this.client.sendOperationRequest(
      {
        id,
        logId,
        options
      },
      getLogEntryDetails1OperationSpec,
      callback) as Promise<Models.DeploymentGetLogEntryDetails1Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentGetDeploymentScriptResponse>
   */
  getDeploymentScript(options?: msRest.RequestOptionsBase): Promise<Models.DeploymentGetDeploymentScriptResponse>;
  /**
   * @param callback The callback
   */
  getDeploymentScript(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeploymentScript(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getDeploymentScript(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DeploymentGetDeploymentScriptResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDeploymentScriptOperationSpec,
      callback) as Promise<Models.DeploymentGetDeploymentScriptResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getDeployResultsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "deployments",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeployResult"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getDeployResults1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/deployments",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeployResult"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getResultOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "deployments/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeployResult
    },
    202: {
      bodyMapper: Mappers.DeployResult
    },
    default: {}
  },
  serializer
};

const deployOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "deployments/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "deployments/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const getResult1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/deployments/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeployResult
    },
    202: {
      bodyMapper: Mappers.DeployResult
    },
    default: {}
  },
  serializer
};

const deploy1OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/deployments/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const delete1OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/deployments/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const getLogEntryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "deployments/{id}/log",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogEntry"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getLogEntry1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/deployments/{id}/log",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogEntry"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getLogEntryDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "deployments/{id}/log/{logId}",
  urlParameters: [
    Parameters.id0,
    Parameters.logId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogEntry"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getLogEntryDetails1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/deployments/{id}/log/{logId}",
  urlParameters: [
    Parameters.id0,
    Parameters.logId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogEntry"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getDeploymentScriptOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/deploymentscript",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};
