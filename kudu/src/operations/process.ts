/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/processMappers";
import * as Parameters from "../models/parameters";
import { KuduClientContext } from "../kuduClientContext";

/** Class representing a Process. */
export class Process {
  private readonly client: KuduClientContext;

  /**
   * Create a Process.
   * @param {KuduClientContext} client Reference to the service client.
   */
  constructor(client: KuduClientContext) {
    this.client = client;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetAllProcessesResponse>
   */
  getAllProcesses(options?: Models.ProcessGetAllProcessesOptionalParams): Promise<Models.ProcessGetAllProcessesResponse>;
  /**
   * @param callback The callback
   */
  getAllProcesses(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllProcesses(options: Models.ProcessGetAllProcessesOptionalParams, callback: msRest.ServiceCallback<any>): void;
  getAllProcesses(options?: Models.ProcessGetAllProcessesOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetAllProcessesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllProcessesOperationSpec,
      callback) as Promise<Models.ProcessGetAllProcessesResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetAllProcesses1Response>
   */
  getAllProcesses1(options?: Models.ProcessGetAllProcesses1OptionalParams): Promise<Models.ProcessGetAllProcesses1Response>;
  /**
   * @param callback The callback
   */
  getAllProcesses1(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllProcesses1(options: Models.ProcessGetAllProcesses1OptionalParams, callback: msRest.ServiceCallback<any>): void;
  getAllProcesses1(options?: Models.ProcessGetAllProcesses1OptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetAllProcesses1Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllProcesses1OperationSpec,
      callback) as Promise<Models.ProcessGetAllProcesses1Response>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetAllProcesses2Response>
   */
  getAllProcesses2(options?: Models.ProcessGetAllProcesses2OptionalParams): Promise<Models.ProcessGetAllProcesses2Response>;
  /**
   * @param callback The callback
   */
  getAllProcesses2(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllProcesses2(options: Models.ProcessGetAllProcesses2OptionalParams, callback: msRest.ServiceCallback<any>): void;
  getAllProcesses2(options?: Models.ProcessGetAllProcesses2OptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetAllProcesses2Response> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllProcesses2OperationSpec,
      callback) as Promise<Models.ProcessGetAllProcesses2Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetProcessResponse>
   */
  getProcess(id: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetProcessResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getProcess(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getProcess(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getProcess(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetProcessResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getProcessOperationSpec,
      callback) as Promise<Models.ProcessGetProcessResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  killProcess(id: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  killProcess(id: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  killProcess(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  killProcess(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      killProcessOperationSpec,
      callback);
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetProcess1Response>
   */
  getProcess1(id: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetProcess1Response>;
  /**
   * @param id
   * @param callback The callback
   */
  getProcess1(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getProcess1(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getProcess1(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetProcess1Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getProcess1OperationSpec,
      callback) as Promise<Models.ProcessGetProcess1Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  killProcess1(id: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  killProcess1(id: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  killProcess1(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  killProcess1(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      killProcess1OperationSpec,
      callback);
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetProcess2Response>
   */
  getProcess2(id: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetProcess2Response>;
  /**
   * @param id
   * @param callback The callback
   */
  getProcess2(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getProcess2(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getProcess2(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetProcess2Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getProcess2OperationSpec,
      callback) as Promise<Models.ProcessGetProcess2Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  killProcess2(id: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  killProcess2(id: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  killProcess2(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  killProcess2(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      killProcess2OperationSpec,
      callback);
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessMiniDumpResponse>
   */
  miniDump(id: number, options?: Models.ProcessMiniDumpOptionalParams): Promise<Models.ProcessMiniDumpResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  miniDump(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  miniDump(id: number, options: Models.ProcessMiniDumpOptionalParams, callback: msRest.ServiceCallback<any>): void;
  miniDump(id: number, options?: Models.ProcessMiniDumpOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessMiniDumpResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      miniDumpOperationSpec,
      callback) as Promise<Models.ProcessMiniDumpResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessMiniDump1Response>
   */
  miniDump1(id: number, options?: Models.ProcessMiniDump1OptionalParams): Promise<Models.ProcessMiniDump1Response>;
  /**
   * @param id
   * @param callback The callback
   */
  miniDump1(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  miniDump1(id: number, options: Models.ProcessMiniDump1OptionalParams, callback: msRest.ServiceCallback<any>): void;
  miniDump1(id: number, options?: Models.ProcessMiniDump1OptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessMiniDump1Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      miniDump1OperationSpec,
      callback) as Promise<Models.ProcessMiniDump1Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessMiniDump2Response>
   */
  miniDump2(id: number, options?: Models.ProcessMiniDump2OptionalParams): Promise<Models.ProcessMiniDump2Response>;
  /**
   * @param id
   * @param callback The callback
   */
  miniDump2(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  miniDump2(id: number, options: Models.ProcessMiniDump2OptionalParams, callback: msRest.ServiceCallback<any>): void;
  miniDump2(id: number, options?: Models.ProcessMiniDump2OptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessMiniDump2Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      miniDump2OperationSpec,
      callback) as Promise<Models.ProcessMiniDump2Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessStartProfileAsyncResponse>
   */
  startProfileAsync(id: number, options?: Models.ProcessStartProfileAsyncOptionalParams): Promise<Models.ProcessStartProfileAsyncResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  startProfileAsync(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  startProfileAsync(id: number, options: Models.ProcessStartProfileAsyncOptionalParams, callback: msRest.ServiceCallback<any>): void;
  startProfileAsync(id: number, options?: Models.ProcessStartProfileAsyncOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessStartProfileAsyncResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      startProfileAsyncOperationSpec,
      callback) as Promise<Models.ProcessStartProfileAsyncResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessStartProfileAsync1Response>
   */
  startProfileAsync1(id: number, options?: Models.ProcessStartProfileAsync1OptionalParams): Promise<Models.ProcessStartProfileAsync1Response>;
  /**
   * @param id
   * @param callback The callback
   */
  startProfileAsync1(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  startProfileAsync1(id: number, options: Models.ProcessStartProfileAsync1OptionalParams, callback: msRest.ServiceCallback<any>): void;
  startProfileAsync1(id: number, options?: Models.ProcessStartProfileAsync1OptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessStartProfileAsync1Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      startProfileAsync1OperationSpec,
      callback) as Promise<Models.ProcessStartProfileAsync1Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessStartProfileAsync2Response>
   */
  startProfileAsync2(id: number, options?: Models.ProcessStartProfileAsync2OptionalParams): Promise<Models.ProcessStartProfileAsync2Response>;
  /**
   * @param id
   * @param callback The callback
   */
  startProfileAsync2(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  startProfileAsync2(id: number, options: Models.ProcessStartProfileAsync2OptionalParams, callback: msRest.ServiceCallback<any>): void;
  startProfileAsync2(id: number, options?: Models.ProcessStartProfileAsync2OptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessStartProfileAsync2Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      startProfileAsync2OperationSpec,
      callback) as Promise<Models.ProcessStartProfileAsync2Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessStopProfileAsyncResponse>
   */
  stopProfileAsync(id: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessStopProfileAsyncResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  stopProfileAsync(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  stopProfileAsync(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  stopProfileAsync(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessStopProfileAsyncResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      stopProfileAsyncOperationSpec,
      callback) as Promise<Models.ProcessStopProfileAsyncResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessStopProfileAsync1Response>
   */
  stopProfileAsync1(id: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessStopProfileAsync1Response>;
  /**
   * @param id
   * @param callback The callback
   */
  stopProfileAsync1(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  stopProfileAsync1(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  stopProfileAsync1(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessStopProfileAsync1Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      stopProfileAsync1OperationSpec,
      callback) as Promise<Models.ProcessStopProfileAsync1Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessStopProfileAsync2Response>
   */
  stopProfileAsync2(id: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessStopProfileAsync2Response>;
  /**
   * @param id
   * @param callback The callback
   */
  stopProfileAsync2(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  stopProfileAsync2(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  stopProfileAsync2(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessStopProfileAsync2Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      stopProfileAsync2OperationSpec,
      callback) as Promise<Models.ProcessStopProfileAsync2Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetAllThreadsResponse>
   */
  getAllThreads(id: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetAllThreadsResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getAllThreads(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllThreads(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAllThreads(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetAllThreadsResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getAllThreadsOperationSpec,
      callback) as Promise<Models.ProcessGetAllThreadsResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetAllThreads1Response>
   */
  getAllThreads1(id: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetAllThreads1Response>;
  /**
   * @param id
   * @param callback The callback
   */
  getAllThreads1(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllThreads1(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAllThreads1(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetAllThreads1Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getAllThreads1OperationSpec,
      callback) as Promise<Models.ProcessGetAllThreads1Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetAllThreads2Response>
   */
  getAllThreads2(id: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetAllThreads2Response>;
  /**
   * @param id
   * @param callback The callback
   */
  getAllThreads2(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllThreads2(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAllThreads2(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetAllThreads2Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getAllThreads2OperationSpec,
      callback) as Promise<Models.ProcessGetAllThreads2Response>;
  }

  /**
   * @param processId
   * @param threadId
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetThreadResponse>
   */
  getThread(processId: number, threadId: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetThreadResponse>;
  /**
   * @param processId
   * @param threadId
   * @param callback The callback
   */
  getThread(processId: number, threadId: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param processId
   * @param threadId
   * @param options The optional parameters
   * @param callback The callback
   */
  getThread(processId: number, threadId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getThread(processId: number, threadId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetThreadResponse> {
    return this.client.sendOperationRequest(
      {
        processId,
        threadId,
        options
      },
      getThreadOperationSpec,
      callback) as Promise<Models.ProcessGetThreadResponse>;
  }

  /**
   * @param processId
   * @param threadId
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetThread1Response>
   */
  getThread1(processId: number, threadId: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetThread1Response>;
  /**
   * @param processId
   * @param threadId
   * @param callback The callback
   */
  getThread1(processId: number, threadId: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param processId
   * @param threadId
   * @param options The optional parameters
   * @param callback The callback
   */
  getThread1(processId: number, threadId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getThread1(processId: number, threadId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetThread1Response> {
    return this.client.sendOperationRequest(
      {
        processId,
        threadId,
        options
      },
      getThread1OperationSpec,
      callback) as Promise<Models.ProcessGetThread1Response>;
  }

  /**
   * @param processId
   * @param threadId
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetThread2Response>
   */
  getThread2(processId: number, threadId: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetThread2Response>;
  /**
   * @param processId
   * @param threadId
   * @param callback The callback
   */
  getThread2(processId: number, threadId: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param processId
   * @param threadId
   * @param options The optional parameters
   * @param callback The callback
   */
  getThread2(processId: number, threadId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getThread2(processId: number, threadId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetThread2Response> {
    return this.client.sendOperationRequest(
      {
        processId,
        threadId,
        options
      },
      getThread2OperationSpec,
      callback) as Promise<Models.ProcessGetThread2Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetAllModulesResponse>
   */
  getAllModules(id: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetAllModulesResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getAllModules(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllModules(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAllModules(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetAllModulesResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getAllModulesOperationSpec,
      callback) as Promise<Models.ProcessGetAllModulesResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetAllModules1Response>
   */
  getAllModules1(id: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetAllModules1Response>;
  /**
   * @param id
   * @param callback The callback
   */
  getAllModules1(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllModules1(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAllModules1(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetAllModules1Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getAllModules1OperationSpec,
      callback) as Promise<Models.ProcessGetAllModules1Response>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetAllModules2Response>
   */
  getAllModules2(id: number, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetAllModules2Response>;
  /**
   * @param id
   * @param callback The callback
   */
  getAllModules2(id: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllModules2(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getAllModules2(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetAllModules2Response> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getAllModules2OperationSpec,
      callback) as Promise<Models.ProcessGetAllModules2Response>;
  }

  /**
   * @param id
   * @param baseAddress
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetModuleResponse>
   */
  getModule(id: number, baseAddress: string, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetModuleResponse>;
  /**
   * @param id
   * @param baseAddress
   * @param callback The callback
   */
  getModule(id: number, baseAddress: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param baseAddress
   * @param options The optional parameters
   * @param callback The callback
   */
  getModule(id: number, baseAddress: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getModule(id: number, baseAddress: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetModuleResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        baseAddress,
        options
      },
      getModuleOperationSpec,
      callback) as Promise<Models.ProcessGetModuleResponse>;
  }

  /**
   * @param id
   * @param baseAddress
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetModule1Response>
   */
  getModule1(id: number, baseAddress: string, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetModule1Response>;
  /**
   * @param id
   * @param baseAddress
   * @param callback The callback
   */
  getModule1(id: number, baseAddress: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param baseAddress
   * @param options The optional parameters
   * @param callback The callback
   */
  getModule1(id: number, baseAddress: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getModule1(id: number, baseAddress: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetModule1Response> {
    return this.client.sendOperationRequest(
      {
        id,
        baseAddress,
        options
      },
      getModule1OperationSpec,
      callback) as Promise<Models.ProcessGetModule1Response>;
  }

  /**
   * @param id
   * @param baseAddress
   * @param [options] The optional parameters
   * @returns Promise<Models.ProcessGetModule2Response>
   */
  getModule2(id: number, baseAddress: string, options?: msRest.RequestOptionsBase): Promise<Models.ProcessGetModule2Response>;
  /**
   * @param id
   * @param baseAddress
   * @param callback The callback
   */
  getModule2(id: number, baseAddress: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param baseAddress
   * @param options The optional parameters
   * @param callback The callback
   */
  getModule2(id: number, baseAddress: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getModule2(id: number, baseAddress: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ProcessGetModule2Response> {
    return this.client.sendOperationRequest(
      {
        id,
        baseAddress,
        options
      },
      getModule2OperationSpec,
      callback) as Promise<Models.ProcessGetModule2Response>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAllProcessesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/processes",
  queryParameters: [
    Parameters.allUsers
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getAllProcesses1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "diagnostics/processes",
  queryParameters: [
    Parameters.allUsers
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getAllProcesses2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/diagnostics/processes",
  queryParameters: [
    Parameters.allUsers
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getProcessOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/processes/{id}",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const killProcessOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/processes/{id}",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const getProcess1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "diagnostics/processes/{id}",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const killProcess1OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "diagnostics/processes/{id}",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const getProcess2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/diagnostics/processes/{id}",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const killProcess2OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/diagnostics/processes/{id}",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const miniDumpOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/processes/{id}/dump",
  urlParameters: [
    Parameters.id1
  ],
  queryParameters: [
    Parameters.dumpType,
    Parameters.format
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const miniDump1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "diagnostics/processes/{id}/dump",
  urlParameters: [
    Parameters.id1
  ],
  queryParameters: [
    Parameters.dumpType,
    Parameters.format
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const miniDump2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/diagnostics/processes/{id}/dump",
  urlParameters: [
    Parameters.id1
  ],
  queryParameters: [
    Parameters.dumpType,
    Parameters.format
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const startProfileAsyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/processes/{id}/profile/start",
  urlParameters: [
    Parameters.id1
  ],
  queryParameters: [
    Parameters.iisProfiling
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const startProfileAsync1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "diagnostics/processes/{id}/profile/start",
  urlParameters: [
    Parameters.id1
  ],
  queryParameters: [
    Parameters.iisProfiling
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const startProfileAsync2OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/diagnostics/processes/{id}/profile/start",
  urlParameters: [
    Parameters.id1
  ],
  queryParameters: [
    Parameters.iisProfiling
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const stopProfileAsyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/processes/{id}/profile/stop",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const stopProfileAsync1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "diagnostics/processes/{id}/profile/stop",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const stopProfileAsync2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/diagnostics/processes/{id}/profile/stop",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getAllThreadsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/processes/{id}/threads",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getAllThreads1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "diagnostics/processes/{id}/threads",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getAllThreads2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/diagnostics/processes/{id}/threads",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getThreadOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/processes/{processId}/threads/{threadId}",
  urlParameters: [
    Parameters.processId,
    Parameters.threadId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getThread1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "diagnostics/processes/{processId}/threads/{threadId}",
  urlParameters: [
    Parameters.processId,
    Parameters.threadId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getThread2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/diagnostics/processes/{processId}/threads/{threadId}",
  urlParameters: [
    Parameters.processId,
    Parameters.threadId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getAllModulesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/processes/{id}/modules",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getAllModules1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "diagnostics/processes/{id}/modules",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getAllModules2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/diagnostics/processes/{id}/modules",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getModuleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/processes/{id}/modules/{baseAddress}",
  urlParameters: [
    Parameters.id1,
    Parameters.baseAddress
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getModule1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "diagnostics/processes/{id}/modules/{baseAddress}",
  urlParameters: [
    Parameters.id1,
    Parameters.baseAddress
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};

const getModule2OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/diagnostics/processes/{id}/modules/{baseAddress}",
  urlParameters: [
    Parameters.id1,
    Parameters.baseAddress
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};
